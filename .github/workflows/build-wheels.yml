name: Build Python Wheels

on:
  workflow_run:
    workflows: ["Build Rust Binaries"]
    types:
      - completed
  workflow_dispatch:
  workflow_call:

jobs:
  build-wheels:
    name: Build Wheel (${{ matrix.wheel_platform }})
    runs-on: ${{ matrix.os }}
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux wheels
          - os: ubuntu-latest
            wheel_platform: manylinux_2_28_x86_64
            rust_target: x86_64-unknown-linux-gnu

          - os: ubuntu-latest
            wheel_platform: manylinux_2_28_aarch64
            rust_target: aarch64-unknown-linux-gnu

          # Windows wheels
          - os: windows-latest
            wheel_platform: win_amd64
            rust_target: x86_64-pc-windows-msvc

          - os: windows-latest
            wheel_platform: win32
            rust_target: i686-pc-windows-msvc

          # macOS wheels
          - os: macos-latest
            wheel_platform: macosx_10_12_x86_64
            rust_target: x86_64-apple-darwin

          - os: macos-latest
            wheel_platform: macosx_11_0_arm64
            rust_target: aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts from build-rust workflow
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: build-rust.yml
          workflow_conclusion: success
          name: binary-${{ matrix.rust_target }}
          path: bin
          github_token: ${{ secrets.GITHUB_TOKEN }}
          if_no_artifact_found: error

      - name: List downloaded files
        shell: bash
        run: |
          echo "Contents of bin directory:"
          ls -la bin/

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          cache: "pip"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install build wheel setuptools auditwheel

      - name: Build wheel
        env:
          PLAT: ${{ matrix.wheel_platform }}
        run: python -m build --wheel

      - name: Audit wheel (Linux)
        if: runner.os == 'Linux'
        run: |
          auditwheel repair dist/*.whl
          rm dist/*.whl
          mv wheelhouse/*.whl dist/

      - name: Verify wheel contents
        shell: bash
        run: |
          echo "Wheel contents:"
          unzip -l dist/*.whl

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v3
        with:
          name: wheel-${{ matrix.wheel_platform }}
          path: dist/*.whl
          if-no-files-found: error
