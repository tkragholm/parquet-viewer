name: Build Rust Binaries

on:
  push:
    tags:
      - "v*"
  workflow_call: # Allows this workflow to be called by other workflows

jobs:
  build-rust:
    name: Build Rust (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin_name: parquet-viewer
            use_cross: false

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            bin_name: parquet-viewer
            use_cross: true

          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bin_name: parquet-viewer.exe
            use_cross: false

          - os: windows-latest
            target: i686-pc-windows-msvc
            bin_name: parquet-viewer.exe
            use_cross: false

          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            bin_name: parquet-viewer
            use_cross: false

          - os: macos-latest
            target: aarch64-apple-darwin
            bin_name: parquet-viewer
            use_cross: false

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: rust-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cross-compilation tools
        if: matrix.use_cross
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cross

      - name: Build binary
        shell: bash
        run: |
          if [ "${{ matrix.use_cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Prepare binary
        shell: bash
        run: |
          mkdir -p artifacts/bin
          cp "target/${{ matrix.target }}/release/${{ matrix.bin_name }}" artifacts/bin/
          if [[ "${{ runner.os }}" != "Windows" ]]; then
            chmod +x artifacts/bin/${{ matrix.bin_name }}
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: binary-${{ matrix.target }}
          path: artifacts/bin/*
          if-no-files-found: error
